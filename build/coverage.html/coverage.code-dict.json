{"/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/test.js":"/* istanbul instrument in package npmtest_eslint_plugin_flowtype */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/lib.npmtest_eslint_plugin_flowtype.js":"/* istanbul instrument in package npmtest_eslint_plugin_flowtype */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_eslint_plugin_flowtype = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_eslint_plugin_flowtype = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-eslint-plugin-flowtype && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_eslint_plugin_flowtype */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_eslint_plugin_flowtype\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_eslint_plugin_flowtype.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_eslint_plugin_flowtype.rollup.js'] =\n            local.assetsDict['/assets.npmtest_eslint_plugin_flowtype.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_eslint_plugin_flowtype.__dirname + '/lib.npmtest_eslint_plugin_flowtype.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _utilities = require('./utilities');\n\nvar _defineFlowType = require('./rules/defineFlowType');\n\nvar _defineFlowType2 = _interopRequireDefault(_defineFlowType);\n\nvar _genericSpacing = require('./rules/genericSpacing');\n\nvar _genericSpacing2 = _interopRequireDefault(_genericSpacing);\n\nvar _noWeakTypes = require('./rules/noWeakTypes');\n\nvar _noWeakTypes2 = _interopRequireDefault(_noWeakTypes);\n\nvar _noTypesMissingFileAnnotation = require('./rules/noTypesMissingFileAnnotation');\n\nvar _noTypesMissingFileAnnotation2 = _interopRequireDefault(_noTypesMissingFileAnnotation);\n\nvar _requireParameterType = require('./rules/requireParameterType');\n\nvar _requireParameterType2 = _interopRequireDefault(_requireParameterType);\n\nvar _requireReturnType = require('./rules/requireReturnType');\n\nvar _requireReturnType2 = _interopRequireDefault(_requireReturnType);\n\nvar _requireValidFileAnnotation = require('./rules/requireValidFileAnnotation');\n\nvar _requireValidFileAnnotation2 = _interopRequireDefault(_requireValidFileAnnotation);\n\nvar _requireVariableType = require('./rules/requireVariableType');\n\nvar _requireVariableType2 = _interopRequireDefault(_requireVariableType);\n\nvar _semi = require('./rules/semi');\n\nvar _semi2 = _interopRequireDefault(_semi);\n\nvar _spaceAfterTypeColon = require('./rules/spaceAfterTypeColon');\n\nvar _spaceAfterTypeColon2 = _interopRequireDefault(_spaceAfterTypeColon);\n\nvar _spaceBeforeGenericBracket = require('./rules/spaceBeforeGenericBracket');\n\nvar _spaceBeforeGenericBracket2 = _interopRequireDefault(_spaceBeforeGenericBracket);\n\nvar _spaceBeforeTypeColon = require('./rules/spaceBeforeTypeColon');\n\nvar _spaceBeforeTypeColon2 = _interopRequireDefault(_spaceBeforeTypeColon);\n\nvar _unionIntersectionSpacing = require('./rules/unionIntersectionSpacing');\n\nvar _unionIntersectionSpacing2 = _interopRequireDefault(_unionIntersectionSpacing);\n\nvar _typeIdMatch = require('./rules/typeIdMatch');\n\nvar _typeIdMatch2 = _interopRequireDefault(_typeIdMatch);\n\nvar _useFlowType = require('./rules/useFlowType');\n\nvar _useFlowType2 = _interopRequireDefault(_useFlowType);\n\nvar _validSyntax = require('./rules/validSyntax');\n\nvar _validSyntax2 = _interopRequireDefault(_validSyntax);\n\nvar _booleanStyle = require('./rules/booleanStyle');\n\nvar _booleanStyle2 = _interopRequireDefault(_booleanStyle);\n\nvar _delimiterDangle = require('./rules/delimiterDangle');\n\nvar _delimiterDangle2 = _interopRequireDefault(_delimiterDangle);\n\nvar _noDupeKeys = require('./rules/noDupeKeys');\n\nvar _noDupeKeys2 = _interopRequireDefault(_noDupeKeys);\n\nvar _noPrimitiveConstructorTypes = require('./rules/noPrimitiveConstructorTypes');\n\nvar _noPrimitiveConstructorTypes2 = _interopRequireDefault(_noPrimitiveConstructorTypes);\n\nvar _sortKeys = require('./rules/sortKeys');\n\nvar _sortKeys2 = _interopRequireDefault(_sortKeys);\n\nvar _objectTypeDelimiter = require('./rules/objectTypeDelimiter');\n\nvar _objectTypeDelimiter2 = _interopRequireDefault(_objectTypeDelimiter);\n\nvar _recommended = require('./configs/recommended.json');\n\nvar _recommended2 = _interopRequireDefault(_recommended);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar rules = {\n  'boolean-style': _booleanStyle2.default,\n  'define-flow-type': _defineFlowType2.default,\n  'delimiter-dangle': _delimiterDangle2.default,\n  'generic-spacing': _genericSpacing2.default,\n  'no-dupe-keys': _noDupeKeys2.default,\n  'no-primitive-constructor-types': _noPrimitiveConstructorTypes2.default,\n  'no-types-missing-file-annotation': _noTypesMissingFileAnnotation2.default,\n  'no-weak-types': _noWeakTypes2.default,\n  'object-type-delimiter': _objectTypeDelimiter2.default,\n  'require-parameter-type': _requireParameterType2.default,\n  'require-return-type': _requireReturnType2.default,\n  'require-valid-file-annotation': _requireValidFileAnnotation2.default,\n  'require-variable-type': _requireVariableType2.default,\n  semi: _semi2.default,\n  'sort-keys': _sortKeys2.default,\n  'space-after-type-colon': _spaceAfterTypeColon2.default,\n  'space-before-generic-bracket': _spaceBeforeGenericBracket2.default,\n  'space-before-type-colon': _spaceBeforeTypeColon2.default,\n  'type-id-match': _typeIdMatch2.default,\n  'union-intersection-spacing': _unionIntersectionSpacing2.default,\n  'use-flow-type': _useFlowType2.default,\n  'valid-syntax': _validSyntax2.default\n};\n\nexports.default = {\n  configs: {\n    recommended: _recommended2.default\n  },\n  rules: _lodash2.default.mapValues(rules, function (rule, key) {\n    // Support current and deprecated rule formats\n    if (_lodash2.default.isPlainObject(rule)) {\n      return _extends({}, rule, {\n        create: _lodash2.default.partial(_utilities.checkFlowFileAnnotation, rule.create)\n      });\n    }\n\n    if (key === 'no-types-missing-file-annotation') {\n      return rule;\n    }\n\n    return _lodash2.default.partial(_utilities.checkFlowFileAnnotation, rule);\n  }),\n  rulesConfig: {\n    'boolean-style': 0,\n    'define-flow-type': 0,\n    'delimiter-dangle': 0,\n    'generic-spacing': 0,\n    'no-dupe-keys': 0,\n    'no-weak-types': 0,\n    'object-type-delimiter': 0,\n    'require-parameter-type': 0,\n    'require-return-type': 0,\n    'require-variable-type': 0,\n    semi: 0,\n    'sort-keys': 0,\n    'space-after-type-colon': 0,\n    'space-before-generic-bracket': 0,\n    'space-before-type-colon': 0,\n    'type-id-match': 0,\n    'union-intersection-spacing': 0,\n    'use-flow-type': 0,\n    'valid-syntax': 0\n  }\n};\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/utilities/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.spacingFixers = exports.quoteName = exports.iterateFunctionNodes = exports.isFlowFileAnnotation = exports.isFlowFile = exports.getTokenBeforeParens = exports.getTokenAfterParens = exports.getParameterName = exports.fuzzyStringMatch = exports.checkFlowFileAnnotation = undefined;\n\nvar _checkFlowFileAnnotation = require('./checkFlowFileAnnotation');\n\nObject.defineProperty(exports, 'checkFlowFileAnnotation', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_checkFlowFileAnnotation).default;\n  }\n});\n\nvar _fuzzyStringMatch = require('./fuzzyStringMatch');\n\nObject.defineProperty(exports, 'fuzzyStringMatch', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_fuzzyStringMatch).default;\n  }\n});\n\nvar _getParameterName = require('./getParameterName.js');\n\nObject.defineProperty(exports, 'getParameterName', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_getParameterName).default;\n  }\n});\n\nvar _getTokenAfterParens = require('./getTokenAfterParens');\n\nObject.defineProperty(exports, 'getTokenAfterParens', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_getTokenAfterParens).default;\n  }\n});\n\nvar _getTokenBeforeParens = require('./getTokenBeforeParens');\n\nObject.defineProperty(exports, 'getTokenBeforeParens', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_getTokenBeforeParens).default;\n  }\n});\n\nvar _isFlowFile = require('./isFlowFile.js');\n\nObject.defineProperty(exports, 'isFlowFile', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_isFlowFile).default;\n  }\n});\n\nvar _isFlowFileAnnotation = require('./isFlowFileAnnotation.js');\n\nObject.defineProperty(exports, 'isFlowFileAnnotation', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_isFlowFileAnnotation).default;\n  }\n});\n\nvar _iterateFunctionNodes = require('./iterateFunctionNodes.js');\n\nObject.defineProperty(exports, 'iterateFunctionNodes', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_iterateFunctionNodes).default;\n  }\n});\n\nvar _quoteName = require('./quoteName');\n\nObject.defineProperty(exports, 'quoteName', {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_quoteName).default;\n  }\n});\n\nvar _spacingFixers = require('./spacingFixers');\n\nvar spacingFixers = _interopRequireWildcard(_spacingFixers);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.spacingFixers = spacingFixers;","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/utilities/checkFlowFileAnnotation.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _isFlowFile = require('./isFlowFile');\n\nvar _isFlowFile2 = _interopRequireDefault(_isFlowFile);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (cb, context) {\n  var checkThisFile = !_lodash2.default.get(context, 'settings.flowtype.onlyFilesWithFlowAnnotation') || (0, _isFlowFile2.default)(context);\n\n  if (!checkThisFile) {\n    return function () {};\n  }\n\n  return cb(context);\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/utilities/isFlowFile.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _isFlowFileAnnotation = require('./isFlowFileAnnotation.js');\n\nvar _isFlowFileAnnotation2 = _interopRequireDefault(_isFlowFileAnnotation);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/* eslint-disable flowtype/require-valid-file-annotation */\n/**\n * Checks whether a file has an @flow or @noflow annotation.\n * @param context\n * @param [strict] - By default, the function returns true if the file starts with @flow but not if it\n * starts by @noflow. When the strict flag is set to false, the function returns true if the flag has @noflow also.\n */\n/* eslint-enable flowtype/require-valid-file-annotation */\nexports.default = function (context) {\n  var strict = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  var comments = context.getAllComments();\n\n  if (!comments.length) {\n    return false;\n  }\n\n  var firstComment = comments[0];\n\n  return (0, _isFlowFileAnnotation2.default)(firstComment.value) && !(strict && /no/.test(firstComment.value));\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/utilities/isFlowFileAnnotation.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar FLOW_MATCHER = /^@(?:no)?flow$/;\n\nexports.default = function (comment) {\n  // eslint-disable-next-line flowtype/require-valid-file-annotation\n  // The flow parser splits comments with the following regex to look for the @flow flag.\n  // See https://github.com/facebook/flow/blob/a96249b93541f2f7bfebd8d62085bf7a75de02f2/src/parsing/docblock.ml#L39\n  return _lodash2.default.some(comment.split(/[ \\t\\r\\n\\\\*/]+/), function (commentPart) {\n    return FLOW_MATCHER.test(commentPart);\n  });\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/utilities/fuzzyStringMatch.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Creates an array of letter pairs from a given an array\n * https://github.com/d3/d3-array/blob/master/src/pairs.js\n *\n * @param {any} array\n * @returns array\n */\n/* eslint-disable */\nfunction d3ArrayPairs(array) {\n  var i = 0,\n      n = array.length - 1,\n      p = array[0],\n      pairs = new Array(n < 0 ? 0 : n);\n  while (i < n) {\n    pairs[i] = [p, p = array[++i]];\n  }return pairs;\n};\n/* eslint-enable */\n\nexports.default = function (needle, haystack) {\n  var weight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5;\n\n  // Based on http://stackoverflow.com/a/23305385\n\n  var stringSimilarity = function stringSimilarity(str1, str2) {\n    if (str1.length > 0 && str2.length > 0) {\n      var pairs1 = d3ArrayPairs(str1);\n      var pairs2 = d3ArrayPairs(str2);\n      var unionLen = pairs1.length + pairs2.length;\n      var hitCount = void 0;\n\n      hitCount = 0;\n\n      _lodash2.default.forIn(pairs1, function (val1) {\n        _lodash2.default.forIn(pairs2, function (val2) {\n          if (_lodash2.default.isEqual(val1, val2)) {\n            hitCount++;\n          }\n        });\n      });\n\n      if (hitCount > 0) {\n        return 2.0 * hitCount / unionLen;\n      }\n    }\n\n    return 0.0;\n  };\n\n  return stringSimilarity(needle, haystack) >= Number(weight);\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/utilities/getParameterName.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (identifierNode, context) {\n  if (_lodash2.default.has(identifierNode, 'name')) {\n    return identifierNode.name;\n  }\n\n  if (_lodash2.default.has(identifierNode, 'left.name')) {\n    return identifierNode.left.name;\n  }\n\n  if (_lodash2.default.has(identifierNode, 'key.name')) {\n    return identifierNode.key.name;\n  }\n\n  if (identifierNode.type === 'RestElement') {\n    return identifierNode.argument.name;\n  }\n\n  if (identifierNode.type === 'ObjectTypeProperty') {\n    var tokenIndex = 0; // eslint-disable-line init-declarations\n\n    if (identifierNode.static) {\n      tokenIndex++;\n    }\n\n    if (identifierNode.variance) {\n      tokenIndex++;\n    }\n\n    return context.getSourceCode().getFirstToken(identifierNode, tokenIndex).value;\n  }\n\n  if (identifierNode.type === 'FunctionTypeParam') {\n    return context.getSourceCode().getFirstToken(identifierNode).value;\n  }\n\n  if (identifierNode.type === 'ObjectPattern' || identifierNode.type === 'ArrayPattern') {\n    var text = context.getSourceCode().getText(identifierNode);\n\n    if (identifierNode.typeAnnotation) {\n      return text.replace(context.getSourceCode().getText(identifierNode.typeAnnotation), '').trim();\n    } else {\n      return text;\n    }\n  }\n  if (_lodash2.default.get(identifierNode, 'left.type') === 'ObjectPattern') {\n    return context.getSourceCode().getText(identifierNode.left);\n  }\n\n  return null;\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/utilities/getTokenAfterParens.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar getTokenAfterParens = function getTokenAfterParens(sourceCode, node) {\n  var token = void 0;\n\n  token = sourceCode.getTokenAfter(node);\n\n  while (token.type === 'Punctuator' && token.value === ')') {\n    token = sourceCode.getTokenAfter(token);\n  }\n\n  return token;\n};\n\nexports.default = getTokenAfterParens;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/utilities/getTokenBeforeParens.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar getTokenBeforeParens = function getTokenBeforeParens(sourceCode, node) {\n  var token = void 0;\n\n  token = sourceCode.getTokenBefore(node);\n\n  while (token.type === 'Punctuator' && token.value === '(') {\n    token = sourceCode.getTokenBefore(token);\n  }\n\n  return token;\n};\n\nexports.default = getTokenBeforeParens;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/utilities/iterateFunctionNodes.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (iterator) {\n  return function (context) {\n    for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      rest[_key - 1] = arguments[_key];\n    }\n\n    var nodeIterator = iterator.apply(undefined, [context].concat(rest));\n\n    return {\n      ArrowFunctionExpression: nodeIterator,\n      FunctionDeclaration: nodeIterator,\n      FunctionExpression: nodeIterator,\n      FunctionTypeAnnotation: nodeIterator\n    };\n  };\n};\n\nmodule.exports = exports[\"default\"];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/utilities/quoteName.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (name) {\n  return name ? '\"' + name + '\" ' : '';\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/utilities/spacingFixers.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar stripSpacesBefore = exports.stripSpacesBefore = function stripSpacesBefore(node, spaces) {\n  return function (fixer) {\n    return fixer.removeRange([node.start - spaces, node.start]);\n  };\n};\n\nvar stripSpacesAfter = exports.stripSpacesAfter = function stripSpacesAfter(node, spaces) {\n  return function (fixer) {\n    return fixer.removeRange([node.end, node.end + spaces]);\n  };\n};\n\nvar addSpaceBefore = exports.addSpaceBefore = function addSpaceBefore(node) {\n  return function (fixer) {\n    return fixer.insertTextBefore(node, ' ');\n  };\n};\n\nvar addSpaceAfter = exports.addSpaceAfter = function addSpaceAfter(node) {\n  return function (fixer) {\n    return fixer.insertTextAfter(node, ' ');\n  };\n};\n\nvar stripSpaces = exports.stripSpaces = function stripSpaces(direction, node, spaces) {\n  if (direction === 'before') {\n    return stripSpacesBefore(node, spaces);\n  } else {\n    return stripSpacesAfter(node, spaces);\n  }\n};\n\nvar addSpace = exports.addSpace = function addSpace(direction, node) {\n  if (direction === 'before') {\n    return addSpaceBefore(node);\n  } else {\n    return addSpaceAfter(node);\n  }\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/defineFlowType.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar schema = exports.schema = [];\n\nexports.default = function (context) {\n  var globalScope = void 0;\n\n  // do nearly the same thing that eslint does for config globals\n  // https://github.com/eslint/eslint/blob/v2.0.0/lib/eslint.js#L118-L194\n  var makeDefined = function makeDefined(ident) {\n    var ii = void 0;\n\n    // start from the right since we're going to remove items from the array\n    for (ii = globalScope.through.length - 1; ii >= 0; ii--) {\n      var ref = globalScope.through[ii];\n\n      if (ref.identifier.name === ident.name) {\n        // use \"__defineGeneric\" since we don't have a reference to \"escope.Variable\"\n        globalScope.__defineGeneric( // eslint-disable-line no-underscore-dangle\n        ident.name, globalScope.set, globalScope.variables);\n        var variable = globalScope.set.get(ident.name);\n\n        variable.writeable = false;\n        // \"through\" contains all references whose definition cannot be found\n        // so we need to update references and remove the ones that were added\n        globalScope.through.splice(ii, 1);\n        ref.resolved = variable;\n        variable.references.push(ref);\n      }\n    }\n  };\n\n  return {\n    ClassImplements(node) {\n      makeDefined(node.id);\n    },\n    GenericTypeAnnotation(node) {\n      if (node.id.type === 'Identifier') {\n        makeDefined(node.id);\n      } else if (node.id.type === 'QualifiedTypeIdentifier') {\n        var qid = void 0;\n\n        qid = node.id;\n        do {\n          qid = qid.qualification;\n        } while (qid.qualification);\n\n        makeDefined(qid);\n      }\n    },\n    InterfaceDeclaration(node) {\n      makeDefined(node.id);\n    },\n    Program() {\n      globalScope = context.getScope();\n    },\n    TypeParameterDeclaration(node) {\n      node.params.forEach(function (param) {\n        makeDefined(param);\n      });\n    }\n  };\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/genericSpacing.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _utilities = require('./../utilities');\n\nexports.default = function (context) {\n  var sourceCode = context.getSourceCode();\n\n  var never = (context.options[0] || 'never') === 'never';\n\n  return {\n    GenericTypeAnnotation(node) {\n      var types = node.typeParameters;\n\n      // Promise<foo>\n      // ^^^^^^^^^^^^ GenericTypeAnnotation (with typeParameters)\n      //         ^^^  GenericTypeAnnotation (without typeParameters)\n      if (!types) {\n        return;\n      }\n\n      var _sourceCode$getFirstT = sourceCode.getFirstTokens(types, 2),\n          _sourceCode$getFirstT2 = _slicedToArray(_sourceCode$getFirstT, 2),\n          opener = _sourceCode$getFirstT2[0],\n          firstInnerToken = _sourceCode$getFirstT2[1];\n\n      var _sourceCode$getLastTo = sourceCode.getLastTokens(types, 2),\n          _sourceCode$getLastTo2 = _slicedToArray(_sourceCode$getLastTo, 2),\n          lastInnerToken = _sourceCode$getLastTo2[0],\n          closer = _sourceCode$getLastTo2[1];\n\n      var spacesBefore = firstInnerToken.start - opener.end;\n      var spacesAfter = closer.start - lastInnerToken.end;\n\n      if (never) {\n        if (spacesBefore) {\n          context.report({\n            data: { name: node.id.name },\n            fix: _utilities.spacingFixers.stripSpacesAfter(opener, spacesBefore),\n            message: 'There must be no space at start of \"{{name}}\" generic type annotation',\n            node: types\n          });\n        }\n\n        if (spacesAfter) {\n          context.report({\n            data: { name: node.id.name },\n            fix: _utilities.spacingFixers.stripSpacesAfter(lastInnerToken, spacesAfter),\n            message: 'There must be no space at end of \"{{name}}\" generic type annotation',\n            node: types\n          });\n        }\n      } else {\n        if (spacesBefore > 1) {\n          context.report({\n            data: { name: node.id.name },\n            fix: _utilities.spacingFixers.stripSpacesAfter(opener, spacesBefore - 1),\n            message: 'There must be one space at start of \"{{name}}\" generic type annotation',\n            node: types\n          });\n        } else if (spacesBefore === 0) {\n          context.report({\n            data: { name: node.id.name },\n            fix: _utilities.spacingFixers.addSpaceAfter(opener),\n            message: 'There must be a space at start of \"{{name}}\" generic type annotation',\n            node: types\n          });\n        }\n\n        if (spacesAfter > 1) {\n          context.report({\n            data: { name: node.id.name },\n            fix: _utilities.spacingFixers.stripSpacesAfter(lastInnerToken, spacesAfter - 1),\n            message: 'There must be one space at end of \"{{name}}\" generic type annotation',\n            node: types\n          });\n        } else if (spacesAfter === 0) {\n          context.report({\n            data: { name: node.id.name },\n            fix: _utilities.spacingFixers.addSpaceAfter(lastInnerToken),\n            message: 'There must be a space at end of \"{{name}}\" generic type annotation',\n            node: types\n          });\n        }\n      }\n    }\n  };\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/noWeakTypes.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar reportWeakType = function reportWeakType(context, weakType) {\n  return function (node) {\n    context.report({\n      data: { weakType },\n      message: 'Unexpected use of weak type \"{{weakType}}\"',\n      node\n    });\n  };\n};\n\nvar genericTypeEvaluator = function genericTypeEvaluator(context, _ref) {\n  var checkFunction = _ref.checkFunction,\n      checkObject = _ref.checkObject;\n\n  return function (node) {\n    var name = _lodash2.default.get(node, 'id.name');\n\n    if (checkFunction && name === 'Function' || checkObject && name === 'Object') {\n      reportWeakType(context, name)(node);\n    }\n  };\n};\n\nexports.default = function (context) {\n  var checkAny = _lodash2.default.get(context, 'options[0].any', true) === true;\n  var checkFunction = _lodash2.default.get(context, 'options[0].Function', true) === true;\n  var checkObject = _lodash2.default.get(context, 'options[0].Object', true) === true;\n\n  var checks = {};\n\n  if (checkAny) {\n    checks.AnyTypeAnnotation = reportWeakType(context, 'any');\n  }\n\n  if (checkFunction || checkObject) {\n    checks.GenericTypeAnnotation = genericTypeEvaluator(context, {\n      checkFunction,\n      checkObject\n    });\n  }\n\n  return checks;\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/noTypesMissingFileAnnotation.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _utilities = require('../utilities');\n\n/**\n * Disallows the use for flow types without a valid file annotation.\n * Only checks files without a valid flow annotation.\n */\n\nexports.default = function (context) {\n  // Skip flow files\n  if ((0, _utilities.isFlowFile)(context, false)) {\n    return {};\n  }\n\n  var reporter = function reporter(node, type) {\n    context.report({\n      data: { type },\n      message: 'Type {{type}} require valid Flow declaration.',\n      node\n    });\n  };\n\n  return {\n    ImportDeclaration(node) {\n      if (node.importKind === 'type') {\n        reporter(node, 'imports');\n      }\n      if (node.importKind === 'value' && node.specifiers.some(function (specifier) {\n        return specifier.importKind === 'type';\n      })) {\n        reporter(node, 'imports');\n      }\n    },\n    TypeAlias(node) {\n      reporter(node, 'aliases');\n    },\n    TypeAnnotation(node) {\n      reporter(node, 'annotations');\n    }\n  };\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/requireParameterType.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _utilities = require('./../utilities');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _utilities.iterateFunctionNodes)(function (context) {\n  var skipArrows = _lodash2.default.get(context, 'options[0].excludeArrowFunctions');\n  var excludeParameterMatch = new RegExp(_lodash2.default.get(context, 'options[0].excludeParameterMatch', 'a^'));\n\n  return function (functionNode) {\n    _lodash2.default.forEach(functionNode.params, function (identifierNode) {\n      var parameterName = (0, _utilities.getParameterName)(identifierNode, context);\n\n      if (excludeParameterMatch.test(parameterName)) {\n        return;\n      }\n\n      var typeAnnotation = _lodash2.default.get(identifierNode, 'typeAnnotation') || _lodash2.default.get(identifierNode, 'left.typeAnnotation');\n\n      var isArrow = functionNode.type === 'ArrowFunctionExpression';\n      var isArrowFunctionExpression = functionNode.expression;\n\n      if (skipArrows === 'expressionsOnly' && isArrowFunctionExpression || skipArrows === true && isArrow) {\n        return;\n      }\n\n      if (!typeAnnotation) {\n        context.report({\n          data: {\n            name: (0, _utilities.quoteName)(parameterName)\n          },\n          message: 'Missing {{name}}parameter type annotation.',\n          node: identifierNode\n        });\n      }\n    });\n  };\n});\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/requireReturnType.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (context) {\n  var annotateReturn = (_lodash2.default.get(context, 'options[0]') || 'always') === 'always';\n  var annotateUndefined = (_lodash2.default.get(context, 'options[1].annotateUndefined') || 'never') === 'always';\n  var skipArrows = _lodash2.default.get(context, 'options[1].excludeArrowFunctions') || false;\n\n  var makeRegExp = function makeRegExp(str) {\n    return new RegExp(str);\n  };\n\n  var excludeMatching = _lodash2.default.get(context, 'options[1].excludeMatching', []).map(makeRegExp);\n  var includeOnlyMatching = _lodash2.default.get(context, 'options[1].includeOnlyMatching', []).map(makeRegExp);\n\n  var targetNodes = [];\n\n  var registerFunction = function registerFunction(functionNode) {\n    targetNodes.push({\n      functionNode\n    });\n  };\n\n  var isUndefinedReturnType = function isUndefinedReturnType(returnNode) {\n    return returnNode.argument === null || returnNode.argument.name === 'undefined' || returnNode.argument.operator === 'void';\n  };\n\n  var getIsReturnTypeAnnotationUndefined = function getIsReturnTypeAnnotationUndefined(targetNode) {\n    var isReturnTypeAnnotationLiteralUndefined = _lodash2.default.get(targetNode, 'functionNode.returnType.typeAnnotation.id.name') === 'undefined' && _lodash2.default.get(targetNode, 'functionNode.returnType.typeAnnotation.type') === 'GenericTypeAnnotation';\n    var isReturnTypeAnnotationVoid = _lodash2.default.get(targetNode, 'functionNode.returnType.typeAnnotation.type') === 'VoidTypeAnnotation';\n\n    return isReturnTypeAnnotationLiteralUndefined || isReturnTypeAnnotationVoid;\n  };\n\n  var shouldFilterNode = function shouldFilterNode(functionNode) {\n    var isArrow = functionNode.type === 'ArrowFunctionExpression';\n    var identiferName = _lodash2.default.get(functionNode, isArrow ? 'parent.id.name' : 'id.name');\n\n    var checkRegExp = function checkRegExp(regex) {\n      return regex.test(identiferName);\n    };\n\n    if (excludeMatching.length && _lodash2.default.some(excludeMatching, checkRegExp)) {\n      return true;\n    }\n\n    if (includeOnlyMatching.length && !_lodash2.default.some(includeOnlyMatching, checkRegExp)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  var evaluateFunction = function evaluateFunction(functionNode) {\n    var targetNode = targetNodes.pop();\n\n    if (functionNode !== targetNode.functionNode) {\n      throw new Error('Mismatch.');\n    }\n\n    var isArrow = functionNode.type === 'ArrowFunctionExpression';\n    var isArrowFunctionExpression = functionNode.expression;\n    var hasImplicitReturnType = functionNode.async || functionNode.generator;\n    var isFunctionReturnUndefined = !isArrowFunctionExpression && !hasImplicitReturnType && (!targetNode.returnStatementNode || isUndefinedReturnType(targetNode.returnStatementNode));\n    var isReturnTypeAnnotationUndefined = getIsReturnTypeAnnotationUndefined(targetNode);\n\n    if (skipArrows === 'expressionsOnly' && isArrowFunctionExpression || skipArrows === true && isArrow) {\n      return;\n    }\n\n    if (isFunctionReturnUndefined && isReturnTypeAnnotationUndefined && !annotateUndefined) {\n      context.report(functionNode, 'Must not annotate undefined return type.');\n    } else if (isFunctionReturnUndefined && !isReturnTypeAnnotationUndefined && annotateUndefined) {\n      context.report(functionNode, 'Must annotate undefined return type.');\n    } else if (!isFunctionReturnUndefined && !isReturnTypeAnnotationUndefined) {\n      if (annotateReturn && !functionNode.returnType && !shouldFilterNode(functionNode)) {\n        context.report(functionNode, 'Missing return type annotation.');\n      }\n    }\n  };\n\n  var evaluateNoise = function evaluateNoise() {\n    targetNodes.pop();\n  };\n\n  return {\n    ArrowFunctionExpression: registerFunction,\n    'ArrowFunctionExpression:exit': evaluateFunction,\n    ClassDeclaration: registerFunction,\n    'ClassDeclaration:exit': evaluateNoise,\n    ClassExpression: registerFunction,\n    'ClassExpression:exit': evaluateNoise,\n    FunctionDeclaration: registerFunction,\n    'FunctionDeclaration:exit': evaluateFunction,\n    FunctionExpression: registerFunction,\n    'FunctionExpression:exit': evaluateFunction,\n    ReturnStatement: function ReturnStatement(node) {\n      if (targetNodes.length) {\n        targetNodes[targetNodes.length - 1].returnStatementNode = node;\n      }\n    }\n  };\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/requireValidFileAnnotation.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.schema = undefined;\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _utilities = require('./../utilities');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar defaults = {\n  annotationStyle: 'none'\n};\n\nvar looksLikeFlowFileAnnotation = function looksLikeFlowFileAnnotation(comment) {\n  return (/@(?:no)?f/i.test(comment)\n  );\n};\n\nvar isValidAnnotationStyle = function isValidAnnotationStyle(node, style) {\n  if (style === 'none') {\n    return true;\n  }\n\n  return style === node.type.toLowerCase();\n};\n\nvar checkAnnotationSpelling = function checkAnnotationSpelling(comment) {\n  return (/@[a-z]+\\b/.test(comment) && (0, _utilities.fuzzyStringMatch)(comment.replace(/no/i, ''), '@flow', 0.20)\n  );\n};\n\nvar schema = exports.schema = [{\n  enum: ['always']\n}];\n\nexports.default = function (context) {\n  var always = context.options[0] === 'always';\n  var style = _lodash2.default.get(context, 'options[1].annotationStyle', defaults.annotationStyle);\n\n  return {\n    Program(node) {\n      var firstToken = node.tokens[0];\n\n      var potentialFlowFileAnnotation = _lodash2.default.find(context.getAllComments(), function (comment) {\n        return looksLikeFlowFileAnnotation(comment.value);\n      });\n\n      if (potentialFlowFileAnnotation) {\n        if (firstToken && firstToken.start < potentialFlowFileAnnotation.start) {\n          context.report(potentialFlowFileAnnotation, 'Flow file annotation not at the top of the file.');\n        }\n\n        if ((0, _utilities.isFlowFileAnnotation)(potentialFlowFileAnnotation.value.trim())) {\n          if (!isValidAnnotationStyle(potentialFlowFileAnnotation, style)) {\n            var str = style === 'line' ? '`// ' + potentialFlowFileAnnotation.value.trim() + '`' : '`/* ' + potentialFlowFileAnnotation.value.trim() + ' */`';\n\n            context.report(potentialFlowFileAnnotation, 'Flow file annotation style must be ' + str);\n          }\n        } else if (checkAnnotationSpelling(potentialFlowFileAnnotation.value.trim())) {\n          context.report(potentialFlowFileAnnotation, 'Misspelled or malformed Flow file annotation.');\n        } else {\n          context.report(potentialFlowFileAnnotation, 'Malformed Flow file annotation.');\n        }\n      } else if (always) {\n        context.report(node, 'Flow file annotation is missing.');\n      }\n    }\n  };\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/requireVariableType.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _utilities = require('./../utilities');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (context) {\n  var checkThisFile = !_lodash2.default.get(context, 'settings.flowtype.onlyFilesWithFlowAnnotation') || (0, _utilities.isFlowFile)(context);\n\n  if (!checkThisFile) {\n    return function () {};\n  }\n\n  var excludeVariableMatch = new RegExp(_lodash2.default.get(context, 'options[0].excludeVariableMatch', 'a^'));\n  var excludeVariableTypes = _lodash2.default.get(context, 'options[0].excludeVariableTypes', {});\n\n  return {\n    VariableDeclaration: function VariableDeclaration(variableDeclaration) {\n      var variableType = _lodash2.default.get(variableDeclaration, 'kind');\n\n      if (_lodash2.default.get(excludeVariableTypes, variableType)) {\n        return;\n      }\n\n      _lodash2.default.forEach(variableDeclaration.declarations, function (variableDeclarator) {\n        var identifierNode = _lodash2.default.get(variableDeclarator, 'id');\n        var identifierName = _lodash2.default.get(identifierNode, 'name');\n\n        if (excludeVariableMatch.test(identifierName)) {\n          return;\n        }\n\n        var typeAnnotation = _lodash2.default.get(identifierNode, 'typeAnnotation');\n\n        if (!typeAnnotation) {\n          context.report({\n            data: {\n              name: (0, _utilities.quoteName)(identifierName)\n            },\n            message: 'Missing {{name}}variable type annotation.',\n            node: identifierNode\n          });\n        }\n      });\n    }\n  };\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/semi.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (context) {\n  var never = (context.options[0] || 'always') === 'never';\n  var sourceCode = context.getSourceCode();\n\n  var report = function report(node, missing) {\n    var lastToken = sourceCode.getLastToken(node);\n    var fix = void 0,\n        message = void 0;\n    var loc = lastToken.loc;\n\n\n    if (missing) {\n      message = 'Missing semicolon.';\n      loc = loc.end;\n      fix = function fix(fixer) {\n        return fixer.insertTextAfter(lastToken, ';');\n      };\n    } else {\n      message = 'Extra semicolon.';\n      loc = loc.start;\n      fix = function fix(fixer) {\n        return fixer.remove(lastToken);\n      };\n    }\n\n    context.report({\n      fix,\n      loc,\n      message,\n      node\n    });\n  };\n\n  var isSemicolon = function isSemicolon(token) {\n    return token.type === 'Punctuator' && token.value === ';';\n  };\n\n  var checkForSemicolon = function checkForSemicolon(node) {\n    var lastToken = sourceCode.getLastToken(node);\n    var isLastTokenSemicolon = isSemicolon(lastToken);\n\n    if (never && isLastTokenSemicolon) {\n      report(node, false);\n    }\n\n    if (!never && !isLastTokenSemicolon) {\n      report(node, true);\n    }\n  };\n\n  return {\n    TypeAlias: checkForSemicolon\n  };\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/spaceAfterTypeColon.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _typeColonSpacing = require('./typeColonSpacing');\n\nvar _typeColonSpacing2 = _interopRequireDefault(_typeColonSpacing);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (context) {\n  return (0, _typeColonSpacing2.default)('after', context, {\n    allowLineBreak: _lodash2.default.get(context, ['options', '1', 'allowLineBreak'], false),\n    always: _lodash2.default.get(context, ['options', '0'], 'always') === 'always'\n  });\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/typeColonSpacing/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _reporter = require('./reporter');\n\nvar _reporter2 = _interopRequireDefault(_reporter);\n\nvar _evaluateObjectTypeIndexer = require('./evaluateObjectTypeIndexer');\n\nvar _evaluateObjectTypeIndexer2 = _interopRequireDefault(_evaluateObjectTypeIndexer);\n\nvar _evaluateObjectTypeProperty = require('./evaluateObjectTypeProperty');\n\nvar _evaluateObjectTypeProperty2 = _interopRequireDefault(_evaluateObjectTypeProperty);\n\nvar _evaluateTypeCastExpression = require('./evaluateTypeCastExpression');\n\nvar _evaluateTypeCastExpression2 = _interopRequireDefault(_evaluateTypeCastExpression);\n\nvar _evaluateTypical = require('./evaluateTypical');\n\nvar _evaluateTypical2 = _interopRequireDefault(_evaluateTypical);\n\nvar _evaluateFunctions = require('./evaluateFunctions');\n\nvar _evaluateFunctions2 = _interopRequireDefault(_evaluateFunctions);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (direction, context, options) {\n  var report = (0, _reporter2.default)(direction, context, options);\n\n  return _extends({}, (0, _evaluateFunctions2.default)(context, report), {\n    ClassProperty: (0, _evaluateTypical2.default)(context, report, 'class property'),\n    ObjectTypeIndexer: (0, _evaluateObjectTypeIndexer2.default)(context, report),\n    ObjectTypeProperty: (0, _evaluateObjectTypeProperty2.default)(context, report),\n    TypeCastExpression: (0, _evaluateTypeCastExpression2.default)(context, report)\n  });\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/typeColonSpacing/reporter.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _utilities = require('../../utilities');\n\nvar getSpaces = function getSpaces(direction, colon, context) {\n  var sourceCode = context.getSourceCode();\n\n  if (direction === 'before') {\n    return colon.start - sourceCode.getTokenBefore(colon).end;\n  } else {\n    return sourceCode.getTokenAfter(colon).start - colon.end;\n  }\n};\n\nexports.default = function (direction, context, _ref) {\n  var always = _ref.always,\n      allowLineBreak = _ref.allowLineBreak;\n\n  return function (_ref2) {\n    var colon = _ref2.colon,\n        node = _ref2.node,\n        _ref2$name = _ref2.name,\n        name = _ref2$name === undefined ? '' : _ref2$name,\n        _ref2$type = _ref2.type,\n        type = _ref2$type === undefined ? 'type annotation' : _ref2$type;\n\n    var spaces = void 0;\n\n    // Support optional names\n    // type X = { [string]: a }\n    // type X = string => string\n    if (!colon || colon.value !== ':') {\n      return;\n    }\n\n    var data = {\n      direction,\n      name,\n      type\n    };\n\n    var charAfter = context.getSourceCode().getText(colon, 0, 1).slice(1);\n\n    if (allowLineBreak && RegExp(/(\\n|\\r)+/).test(charAfter)) {\n      spaces = 1;\n    } else {\n      spaces = getSpaces(direction, colon, context);\n    }\n\n    if (always && spaces > 1) {\n      context.report({\n        data,\n        fix: _utilities.spacingFixers.stripSpaces(direction, colon, spaces - 1),\n        message: 'There must be 1 space {{direction}} {{name}}{{type}} colon.',\n        node\n      });\n    } else if (always && spaces === 0) {\n      context.report({\n        data,\n        fix: _utilities.spacingFixers.addSpace(direction, colon),\n        message: 'There must be a space {{direction}} {{name}}{{type}} colon.',\n        node\n      });\n    } else if (!always && spaces > 0) {\n      context.report({\n        data,\n        fix: _utilities.spacingFixers.stripSpaces(direction, colon, spaces),\n        message: 'There must be no space {{direction}} {{name}}{{type}} colon.',\n        node\n      });\n    }\n  };\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/typeColonSpacing/evaluateObjectTypeIndexer.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _utilities = require('../../utilities');\n\nexports.default = function (context, report) {\n  var sourceCode = context.getSourceCode();\n\n  return function (objectTypeIndexer) {\n    // type X = { [a: b]: c }\n    //              ^\n    report({\n      colon: (0, _utilities.getTokenBeforeParens)(sourceCode, objectTypeIndexer.key),\n      node: objectTypeIndexer\n    });\n\n    // type X = { [a: b]: c }\n    //                  ^\n    report({\n      colon: sourceCode.getTokenAfter((0, _utilities.getTokenAfterParens)(sourceCode, objectTypeIndexer.key)),\n      node: objectTypeIndexer\n    });\n  };\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/typeColonSpacing/evaluateObjectTypeProperty.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _utilities = require('../../utilities');\n\nvar getColon = function getColon(context, objectTypeProperty) {\n  var tokenIndex = 1; // eslint-disable-line init-declarations\n\n  if (objectTypeProperty.optional) {\n    tokenIndex++;\n  }\n\n  if (objectTypeProperty.static) {\n    tokenIndex++;\n  }\n\n  if (objectTypeProperty.variance) {\n    tokenIndex++;\n  }\n\n  return context.getSourceCode().getFirstToken(objectTypeProperty, tokenIndex);\n};\n\n// 1) type X = { foo(): A; }\n// 2) type X = { foo: () => A; }\n// the above have identical ASTs (save for their ranges)\n// case 1 doesn't have a type annotation colon and should be ignored\nvar isShortPropertyFunction = function isShortPropertyFunction(objectTypeProperty) {\n  return objectTypeProperty.value.type === 'FunctionTypeAnnotation' && objectTypeProperty.start === objectTypeProperty.value.start;\n};\n\nexports.default = function (context, report) {\n  return function (objectTypeProperty) {\n    if (isShortPropertyFunction(objectTypeProperty)) {\n      // potential difference: not checked in before\n      return;\n    }\n\n    report({\n      colon: getColon(context, objectTypeProperty),\n      name: (0, _utilities.quoteName)((0, _utilities.getParameterName)(objectTypeProperty, context)),\n      node: objectTypeProperty\n    });\n  };\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/typeColonSpacing/evaluateTypeCastExpression.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (context, report) {\n  var sourceCode = context.getSourceCode();\n\n  return function (typeCastExpression) {\n    report({\n      colon: sourceCode.getFirstToken(typeCastExpression.typeAnnotation),\n      node: typeCastExpression,\n      type: 'type cast'\n    });\n  };\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/typeColonSpacing/evaluateTypical.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _utilities = require('../../utilities');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (context, report, typeForMessage) {\n  var sourceCode = context.getSourceCode();\n\n  var getColon = function getColon(node, typeAnnotation) {\n    if (node.type === 'FunctionTypeParam') {\n      return sourceCode.getFirstToken(node, node.optional ? 2 : 1);\n    } else {\n      return sourceCode.getFirstToken(typeAnnotation);\n    }\n  };\n\n  return function (node) {\n    var typeAnnotation = _lodash2.default.get(node, 'typeAnnotation') || _lodash2.default.get(node, 'left.typeAnnotation');\n\n    if (typeAnnotation) {\n      report({\n        colon: getColon(node, typeAnnotation),\n        name: (0, _utilities.quoteName)((0, _utilities.getParameterName)(node, context)),\n        node,\n        type: typeForMessage + ' type annotation'\n      });\n    }\n  };\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/typeColonSpacing/evaluateFunctions.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _utilities = require('../../utilities');\n\nvar _evaluateTypical = require('./evaluateTypical');\n\nvar _evaluateTypical2 = _interopRequireDefault(_evaluateTypical);\n\nvar _evaluateReturnType = require('./evaluateReturnType');\n\nvar _evaluateReturnType2 = _interopRequireDefault(_evaluateReturnType);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _utilities.iterateFunctionNodes)(function (context, report) {\n  var checkParam = (0, _evaluateTypical2.default)(context, report, 'parameter');\n  var checkReturnType = (0, _evaluateReturnType2.default)(context, report);\n\n  return function (functionNode) {\n    _lodash2.default.forEach(functionNode.params, checkParam);\n    checkReturnType(functionNode);\n  };\n});\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/typeColonSpacing/evaluateReturnType.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (context, report) {\n  var sourceCode = context.getSourceCode();\n\n  return function (functionNode) {\n    // skip FunctionTypeAnnotation, possibly another rule as it's an arrow, not a colon?\n    // (foo: number) => string\n    //              ^^^^\n    if (functionNode.returnType && functionNode.type !== 'FunctionTypeAnnotation') {\n      report({\n        colon: sourceCode.getFirstToken(functionNode.returnType),\n        node: functionNode,\n        type: 'return type'\n      });\n    }\n  };\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/spaceBeforeGenericBracket.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _utilities = require('../utilities');\n\nexports.default = function (context) {\n  var never = (context.options[0] || 'never') === 'never';\n\n  return {\n    GenericTypeAnnotation(node) {\n      var types = node.typeParameters;\n\n      // Promise<foo>\n      // ^^^^^^^^^^^^ GenericTypeAnnotation (with typeParameters)\n      //         ^^^  GenericTypeAnnotation (without typeParameters)\n      if (!types) {\n        return;\n      }\n\n      var spaceBefore = types.start - node.id.end;\n\n      if (never && spaceBefore) {\n        context.report({\n          data: { name: node.id.name },\n          fix: _utilities.spacingFixers.stripSpacesAfter(node.id, spaceBefore),\n          message: 'There must be no space before \"{{name}}\" generic type annotation bracket',\n          node\n        });\n      }\n\n      if (!never && !spaceBefore) {\n        context.report({\n          data: { name: node.id.name },\n          fix: _utilities.spacingFixers.addSpaceAfter(node.id),\n          message: 'There must be a space before \"{{name}}\" generic type annotation bracket',\n          node\n        });\n      }\n\n      if (!never && spaceBefore > 1) {\n        context.report({\n          data: { name: node.id.name },\n          fix: _utilities.spacingFixers.stripSpacesAfter(node.id, spaceBefore - 1),\n          message: 'There must be one space before \"{{name}}\" generic type annotation bracket',\n          node\n        });\n      }\n    }\n  };\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/spaceBeforeTypeColon.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeColonSpacing = require('./typeColonSpacing');\n\nvar _typeColonSpacing2 = _interopRequireDefault(_typeColonSpacing);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (context) {\n  return (0, _typeColonSpacing2.default)('before', context, {\n    always: context.options[0] === 'always'\n  });\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/unionIntersectionSpacing.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _utilities = require('../utilities');\n\nexports.default = function (context) {\n  var sourceCode = context.getSourceCode();\n\n  var always = (context.options[0] || 'always') === 'always';\n\n  var check = function check(node) {\n    node.types.forEach(function (type, index) {\n      if (index + 1 === node.types.length) {\n        return;\n      }\n\n      var separator = (0, _utilities.getTokenAfterParens)(sourceCode, type);\n      var endOfType = sourceCode.getTokenBefore(separator);\n      var nextType = sourceCode.getTokenAfter(separator);\n\n      var spaceBefore = separator.start - endOfType.end;\n      var spaceAfter = nextType.start - separator.end;\n\n      var data = { type: node.type === 'UnionTypeAnnotation' ? 'union' : 'intersection' };\n\n      if (always) {\n        if (!spaceBefore) {\n          context.report({\n            data,\n            fix: _utilities.spacingFixers.addSpaceAfter(endOfType),\n            message: 'There must be a space before {{type}} type annotation separator',\n            node\n          });\n        }\n\n        if (!spaceAfter) {\n          context.report({\n            data,\n            fix: _utilities.spacingFixers.addSpaceAfter(separator),\n            message: 'There must be a space after {{type}} type annotation separator',\n            node\n          });\n        }\n      } else {\n        if (spaceBefore) {\n          context.report({\n            data,\n            fix: _utilities.spacingFixers.stripSpacesAfter(endOfType, spaceBefore),\n            message: 'There must be no space before {{type}} type annotation separator',\n            node\n          });\n        }\n\n        if (spaceAfter) {\n          context.report({\n            data,\n            fix: _utilities.spacingFixers.stripSpacesAfter(separator, spaceAfter),\n            message: 'There must be no space after {{type}} type annotation separator',\n            node\n          });\n        }\n      }\n    });\n  };\n\n  return {\n    IntersectionTypeAnnotation: check,\n    UnionTypeAnnotation: check\n  };\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/typeIdMatch.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar schema = exports.schema = [{\n  type: 'string'\n}];\n\nexports.default = function (context) {\n  var pattern = new RegExp(context.options[0] || '^([A-Z][a-z0-9]*)+Type$');\n\n  return {\n    TypeAlias(typeAliasNode) {\n      var typeIdentifierName = typeAliasNode.id.name;\n\n      if (!pattern.test(typeIdentifierName)) {\n        context.report(typeAliasNode, 'Type identifier \\'{{name}}\\' does not match pattern \\'{{pattern}}\\'.', {\n          name: typeIdentifierName,\n          pattern: pattern.toString()\n        });\n      }\n    }\n  };\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/useFlowType.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar schema = exports.schema = [];\n\nexports.default = function (context) {\n  var markTypeAsUsed = function markTypeAsUsed(node) {\n    context.markVariableAsUsed(node.id.name);\n  };\n\n  return {\n    DeclareClass: markTypeAsUsed,\n    DeclareFunction: markTypeAsUsed,\n    DeclareModule: markTypeAsUsed,\n    DeclareVariable: markTypeAsUsed,\n    GenericTypeAnnotation(node) {\n      var typeId = void 0;\n      var scope = void 0;\n      var variable = void 0;\n\n      if (node.id.type === 'Identifier') {\n        typeId = node.id;\n      } else if (node.id.type === 'QualifiedTypeIdentifier') {\n        typeId = node.id;\n        do {\n          typeId = typeId.qualification;\n        } while (typeId.qualification);\n      }\n\n      for (scope = context.getScope(); scope; scope = scope.upper) {\n        variable = scope.set.get(typeId.name);\n        if (variable && variable.defs.length) {\n          context.markVariableAsUsed(typeId.name);\n          break;\n        }\n      }\n    }\n  };\n};","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/validSyntax.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _utilities = require('./../utilities');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar create = (0, _utilities.iterateFunctionNodes)(function (context) {\n  return function (functionNode) {\n    _lodash2.default.forEach(functionNode.params, function (identifierNode) {\n      var nodeType = _lodash2.default.get(identifierNode, 'type');\n      var isAssignmentPattern = nodeType === 'AssignmentPattern';\n      var hasTypeAnnotation = Boolean(_lodash2.default.get(identifierNode, 'typeAnnotation'));\n      var leftAnnotated = Boolean(_lodash2.default.get(identifierNode, 'left.typeAnnotation'));\n\n      if (isAssignmentPattern && hasTypeAnnotation && !leftAnnotated) {\n        context.report({\n          data: {\n            name: (0, _utilities.quoteName)((0, _utilities.getParameterName)(identifierNode, context))\n          },\n          message: '{{name}}parameter type annotation must be placed on left-hand side of assignment.',\n          node: identifierNode\n        });\n      }\n    });\n  };\n});\n\nexports.default = {\n  create,\n  meta: {\n    deprecated: true\n  }\n};\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/booleanStyle.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (context) {\n  var longForm = (context.options[0] || 'boolean') === 'boolean';\n\n  return {\n    BooleanTypeAnnotation(node) {\n      var diff = node.end - node.start;\n\n      if (longForm && diff === 4) {\n        context.report({\n          fix(fixer) {\n            return fixer.replaceText(node, 'boolean');\n          },\n          message: 'Use \"boolean\", not \"bool\"',\n          node\n        });\n      }\n\n      if (!longForm && diff !== 4) {\n        context.report({\n          fix(fixer) {\n            return fixer.replaceText(node, 'bool');\n          },\n          message: 'Use \"bool\", not \"boolean\"',\n          node\n        });\n      }\n    }\n  };\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/delimiterDangle.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (context) {\n  var option = context.options[0] || 'never';\n  var sourceCode = context.getSourceCode();\n\n  var reporter = function reporter(node, message, fix) {\n    return function () {\n      context.report({\n        fix,\n        message,\n        node\n      });\n    };\n  };\n\n  var makeReporters = function makeReporters(node, tokenToFix) {\n    return {\n      dangle: reporter(node, 'Unexpected trailing delimiter', function (fixer) {\n        return fixer.replaceText(tokenToFix, '');\n      }),\n      noDangle: reporter(node, 'Missing trailing delimiter', function (fixer) {\n        return fixer.insertTextAfter(tokenToFix, ',');\n      })\n    };\n  };\n\n  var evaluate = function evaluate(node, lastChildNode) {\n    if (!lastChildNode) {\n      return;\n    }\n\n    var _sourceCode$getLastTo = sourceCode.getLastTokens(node, 2),\n        _sourceCode$getLastTo2 = _slicedToArray(_sourceCode$getLastTo, 2),\n        penultimateToken = _sourceCode$getLastTo2[0],\n        lastToken = _sourceCode$getLastTo2[1];\n\n    var isDangling = [';', ','].indexOf(penultimateToken.value) > -1;\n    var isMultiLine = penultimateToken.loc.start.line !== lastToken.loc.start.line;\n\n    var report = makeReporters(lastChildNode, penultimateToken);\n\n    if (option === 'always' && !isDangling) {\n      report.noDangle();\n\n      return;\n    }\n\n    if (option === 'never' && isDangling) {\n      report.dangle();\n\n      return;\n    }\n\n    if (option === 'always-multiline' && !isDangling && isMultiLine) {\n      report.noDangle();\n\n      return;\n    }\n\n    if (option === 'always-multiline' && isDangling && !isMultiLine) {\n      report.dangle();\n\n      return;\n    }\n\n    if (option === 'only-multiline' && isDangling && !isMultiLine) {\n      report.dangle();\n\n      return;\n    }\n  };\n\n  // required for reporting the correct position\n  var getLast = function getLast(property, indexer) {\n    if (!property) {\n      return indexer;\n    }\n\n    if (!indexer) {\n      return property;\n    }\n\n    if (property.loc.end.line > indexer.loc.end.line) {\n      return property;\n    }\n\n    if (indexer.loc.end.line > property.loc.end.line) {\n      return indexer;\n    }\n\n    if (property.loc.end.column > indexer.loc.end.column) {\n      return property;\n    }\n\n    return indexer;\n  };\n\n  return {\n    ObjectTypeAnnotation(node) {\n      evaluate(node, getLast(_lodash2.default.last(node.properties), _lodash2.default.last(node.indexers)));\n    },\n\n    TupleTypeAnnotation(node) {\n      evaluate(node, _lodash2.default.last(node.types));\n    }\n  };\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/noDupeKeys.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash/');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _utilities = require('./../utilities');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (context) {\n  var report = function report(node) {\n    context.report({\n      loc: node.loc,\n      message: 'Duplicate property.',\n      node\n    });\n  };\n\n  var analizeElement = function analizeElement(element) {\n    var type = element.type;\n\n    var value = void 0;\n\n    switch (type) {\n      case 'GenericTypeAnnotation':\n        value = element.id.name;\n        break;\n      case 'ObjectTypeAnnotation':\n        // eslint-disable-next-line no-use-before-define\n        value = builObjectStructure(element.properties);\n        break;\n      case 'TupleTypeAnnotation':\n        // eslint-disable-next-line no-use-before-define\n        value = buildArrayStructure(element.types);\n        break;\n      default:\n        value = element.value;\n        break;\n    }\n\n    return {\n      type,\n      value\n    };\n  };\n\n  var buildArrayStructure = function buildArrayStructure(elements) {\n    return _lodash2.default.map(elements, function (element) {\n      return analizeElement(element);\n    });\n  };\n\n  var builObjectStructure = function builObjectStructure(properties) {\n    return _lodash2.default.map(properties, function (property) {\n      var element = analizeElement(property.value);\n\n      return Object.assign(element, {\n        name: (0, _utilities.getParameterName)(property, context)\n      });\n    });\n  };\n\n  var checkForDuplicates = function checkForDuplicates(node) {\n    var haystack = [];\n\n    _lodash2.default.forEach(node.properties, function (identifierNode) {\n      var needle = { name: (0, _utilities.getParameterName)(identifierNode, context) };\n\n      if (identifierNode.value.type === 'FunctionTypeAnnotation') {\n        needle.args = _lodash2.default.map(identifierNode.value.params, function (param) {\n          return analizeElement(param.typeAnnotation);\n        });\n      }\n\n      var match = _lodash2.default.some(haystack, function (existingNeedle) {\n        return _lodash2.default.isEqual(existingNeedle, needle);\n      });\n\n      if (match) {\n        report(identifierNode);\n      } else {\n        haystack.push(needle);\n      }\n    });\n  };\n\n  return {\n    ObjectTypeAnnotation: checkForDuplicates\n  };\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/noPrimitiveConstructorTypes.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n  create: function create(context) {\n    return {\n      GenericTypeAnnotation: function GenericTypeAnnotation(node) {\n        var name = _lodash2.default.get(node, 'id.name');\n\n        if (RegExp(/^(Boolean|Number|String)$/).test(name)) {\n          context.report({\n            data: {\n              name\n            },\n            loc: node.loc,\n            message: 'Unexpected use of {{name}} constructor type.',\n            node\n          });\n        }\n      }\n    };\n  },\n  meta: {},\n  schema: {}\n};\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/sortKeys.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _utilities = require('./../utilities');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar defaults = {\n  caseSensitive: true,\n  natural: false\n};\n\n/**\n * Functions to compare the order of two strings\n *\n * Based on a similar function from eslint's sort-keys rule.\n * https://github.com/eslint/eslint/blob/master/lib/rules/sort-keys.js\n *\n * @private\n */\nvar isValidOrders = {\n  asc(str1, str2) {\n    return str1 <= str2;\n  },\n  ascI(str1, str2) {\n    return str1.toLowerCase() <= str2.toLowerCase();\n  },\n  ascIN(str1, str2) {\n    return isValidOrders.naturalCompare(str1.toLowerCase(), str2.toLowerCase()) <= 0;\n  },\n  ascN(str1, str2) {\n    return isValidOrders.naturalCompare(str1, str2) <= 0;\n  },\n  desc(str1, str2) {\n    return isValidOrders.asc(str2, str1);\n  },\n  descI(str1, str2) {\n    return isValidOrders.ascI(str2, str1);\n  },\n  descIN(str1, str2) {\n    return isValidOrders.ascIN(str2, str1);\n  },\n  descN(str1, str2) {\n    return isValidOrders.ascN(str2, str1);\n  },\n  naturalCompare(str1, str2) {\n    return str1.localeCompare(str2, 'en-US', { numeric: true });\n  }\n};\n\nexports.default = function (context) {\n  var order = _lodash2.default.get(context, ['options', 0], 'asc');\n\n  var _$get = _lodash2.default.get(context, ['options', 1], defaults),\n      natural = _$get.natural,\n      caseSensitive = _$get.caseSensitive;\n\n  var insensitive = caseSensitive === false;\n\n  var prev = void 0;\n  var checkKeyOrder = function checkKeyOrder(node) {\n    prev = null;\n\n    _lodash2.default.forEach(node.properties, function (identifierNode) {\n      var current = (0, _utilities.getParameterName)(identifierNode, context);\n      var last = prev;\n\n      // keep track of the last token\n      prev = current || last;\n\n      if (!last || !current) {\n        return;\n      }\n\n      var isValidOrder = isValidOrders[order + (insensitive ? 'I' : '') + (natural ? 'N' : '')];\n\n      if (isValidOrder(last, current) === false) {\n        context.report({\n          data: {\n            current,\n            insensitive: insensitive ? 'insensitive ' : '',\n            last,\n            natural: natural ? 'natural ' : '',\n            order\n          },\n          loc: identifierNode.loc,\n          message: 'Expected type annotations to be in {{natural}}{{insensitive}}{{order}}ending order. \"{{current}}\" should be before \"{{last}}\".',\n          node: identifierNode\n        });\n      }\n    });\n  };\n\n  return {\n    ObjectTypeAnnotation: checkKeyOrder\n  };\n};\n\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/dist/rules/objectTypeDelimiter.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// ported from babel/flow-object-type; original author: Nat Mote\n// https://github.com/babel/eslint-plugin-babel/blob/c0a49d25a97feb12c1d07073a0b37317359a5fe5/rules/flow-object-type.js\n\nvar SEMICOLON = {\n  char: ';',\n  name: 'semicolon'\n};\n\nvar COMMA = {\n  char: ',',\n  name: 'comma'\n};\n\nvar create = function create(context) {\n  var GOOD = void 0;\n  var BAD = void 0;\n\n  if (!context.options[0] || context.options[0] === COMMA.name) {\n    GOOD = COMMA;\n    BAD = SEMICOLON;\n  } else {\n    GOOD = SEMICOLON;\n    BAD = COMMA;\n  }\n\n  var requireProperPunctuation = function requireProperPunctuation(node) {\n    var tokens = context.getSourceCode().getTokens(node);\n    var lastToken = tokens[tokens.length - 1];\n\n    if (lastToken.type === 'Punctuator') {\n      if (lastToken.value === BAD.char) {\n        context.report({\n          fix(fixer) {\n            return fixer.replaceText(lastToken, GOOD.char);\n          },\n          message: 'Prefer ' + GOOD.name + 's to ' + BAD.name + 's in object and class types',\n          node: lastToken\n        });\n      }\n    }\n  };\n\n  return {\n    ObjectTypeCallProperty: requireProperPunctuation,\n    ObjectTypeIndexer: requireProperPunctuation,\n    ObjectTypeProperty: requireProperPunctuation\n  };\n};\n\nvar schema = [{\n  enum: ['semicolon', 'comma']\n}];\n\nexports.default = {\n  create,\n  schema\n};\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-eslint-plugin-flowtype/node_modules/eslint-plugin-flowtype/bin/readmeAssertions.js":"/**\n * This script is used to inline assertions into the README.md documents.\n */\nimport _ from 'lodash';\nimport glob from 'glob';\nimport path from 'path';\nimport fs from 'fs';\n\nconst formatCodeSnippet = (setup) => {\n    const paragraphs = [];\n\n    if (setup.options) {\n        paragraphs.push('// Options: ' + JSON.stringify(setup.options));\n    }\n\n    paragraphs.push(setup.code);\n\n    if (setup.errors) {\n        setup.errors.forEach((message) => {\n            paragraphs.push('// Message: ' + message.message);\n        });\n    }\n\n    if (setup.rules) {\n        paragraphs.push('// Additional rules: ' + JSON.stringify(setup.rules));\n    }\n\n    return paragraphs.join('\\n');\n};\n\nconst getAssertions = () => {\n    const assertionFiles = glob.sync(path.resolve(__dirname, './../tests/rules/assertions/*.js'));\n\n    const assertionNames = _.map(assertionFiles, (filePath) => {\n        return path.basename(filePath, '.js');\n    });\n\n    const assertionCodes = _.map(assertionFiles, (filePath) => {\n        const codes = require(filePath);\n\n        return {\n            valid: _.map(codes.valid, formatCodeSnippet),\n            invalid: _.map(codes.invalid, formatCodeSnippet)\n        };\n    });\n\n    return _.zipObject(assertionNames, assertionCodes);\n};\n\nconst updateDocuments = (assertions) => {\n    const readmeDocumentPath = path.join(__dirname, './../README.md');\n\n    let documentBody = fs.readFileSync(readmeDocumentPath, 'utf8');\n\n    documentBody = documentBody.replace(/<!-- assertions ([a-z]+?) -->/ig, (assertionsBlock) => {\n        let exampleBody;\n\n        const ruleName = assertionsBlock.match(/assertions ([a-z]+)/i)[1];\n\n        const ruleAssertions = assertions[ruleName];\n\n        if (!ruleAssertions) {\n            throw new Error('No assertions available for rule \"' + ruleName + '\".');\n\n            return assertionsBlock;\n        }\n\n        exampleBody = '';\n\n        if (ruleAssertions.invalid.length) {\n            exampleBody += 'The following patterns are considered problems:\\n\\n```js\\n' + ruleAssertions.invalid.join('\\n\\n') + '\\n```\\n\\n';\n        }\n\n        if (ruleAssertions.valid.length) {\n            exampleBody += 'The following patterns are not considered problems:\\n\\n```js\\n' + ruleAssertions.valid.join('\\n\\n') + '\\n```\\n\\n';\n        }\n\n        return exampleBody;\n    });\n\n    fs.writeFileSync(readmeDocumentPath, documentBody);\n};\n\nupdateDocuments(getAssertions());\n"}